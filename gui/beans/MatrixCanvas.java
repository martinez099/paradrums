/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MatrixCanvas.java
 *
 * Created on 17.04.2010, 12:52:09
 */

package paradrums.gui.beans;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import javax.sound.midi.MidiEvent;

/**
 *
 * @author martinez
 */
public class MatrixCanvas extends Canvas {

    private int rows;

    private int cols;

    private int border = 5;

    private int cellWidth = 40;

    private int cellHeight = 40;

    private int tick = 1;

    private MidiEvent[][] events;

    /** Creates new form BeanForm */
    public MatrixCanvas() {
        initComponents();
    }

    public MatrixCanvas(int rows, int cols) {
        this();
        this.rows = rows;
        this.cols = cols;
    }

    public void setRows(int rows) {
        this.rows = rows;
        Dimension d = getPreferredSize();
        d.setSize(d.getWidth(), rows * cellHeight + 2 * border);
        setPreferredSize(d);
    }

    public void setCols(int cols) {
        this.cols = cols;
        Dimension d = getPreferredSize();
        d.setSize(cols * cellWidth + 2 * border, d.getHeight());
        setPreferredSize(d);
    }

    public void tick(MidiEvent[][] events) {
        tick = ++tick % cols;
        this.events = events;
    }

    @Override
    public void paint(Graphics g) {
        g.setColor(Color.BLACK);
        g.drawRect(border, border, getWidth() - 2 * border, getHeight() - 2 * border);

        for (int r = 1; r < rows; r++) {
            int xStart = border;
            int yStart = border + (int) (cellHeight * r);
            int xEnd = xStart + getWidth() - 2 * border;
            int yEnd = yStart;
            g.drawLine(xStart, yStart, xEnd, yEnd);
            for (MidiEvent event : events[r - 1]) {
                int x = xStart + cellWidth * (r - 1);
                int y = yStart;
                int width = cellWidth;
                int height = cellHeight;
                g.fillRect(x, y, width, height);
            }

        }

        for (int c = 1; c < cols; c++) {
            int xStart = border + (int) (cellWidth * c);
            int yStart = border;
            int xEnd = xStart;
            int yEnd = yStart + getHeight() - 2 * border;
            g.drawLine(xStart, yStart, xEnd, yEnd);
            if (tick == c) {
                int x = xStart;
                int y = yStart;
                int width = cellWidth;
                int height = cellHeight * rows;
                g.setColor(new Color(100, 100, 100, 100));
                g.fillRect(x, y, width, height);
                g.setColor(Color.BLACK);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(600, 600));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
